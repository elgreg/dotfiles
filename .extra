# Git
# ========
# hub
alias git=hub
alias gut=git

# NVM
export NVM_DIR="$HOME/.nvm"
[ -s "$NVM_DIR/nvm.sh" ] && . "$NVM_DIR/nvm.sh"  # This loads nvm


# Docker
# ==================
#
function docker_bash(){
  docker ps | grep $1 | cut -f 1 -d " " | xargs -t -I ID bash -c '</dev/tty docker exec -it ID /bin/bash'
}

alias dc='cd ~/dev/docker-configs'

alias localnginx='docker run -p 80:80 -v `pwd`:/usr/share/nginx/html:ro -d nginx'

export GOPATH=$HOME/go

## CQ5

# alias gocqetc='cd ~/dev/CQ5/UI/src/main/content/jcrs_root/etc/designs/slate/'
# alias gocqapps='cd ~/dev/CQ5/UI/src/main/content/jcr_root/apps/slate/'
# alias cqwatch='cd ~/dev/docker-congfigs/cq_frontend_watcher/; grunt'
# alias cqgrunt='docker-compose -f ~/dev/docker-configs/cq-frontend.yml run cq_front_end /bin/bash -c "cd /code && grunt"'
# alias cqstatic='docker-compose -f ~/dev/docker-configs/cq-frontend.yml up cq_static_files'

# Pyenv
export PATH="$HOME/.pyenv/bin:$PATH"
eval "$(pyenv init -)"
if which pyenv-virtualenv-init > /dev/null; then eval "$(pyenv virtualenv-init -)"; fi


# history stuff
export HISTIGNORE="&:ls:[bf]g:exit"
export HISTCONTROL=ignoreboth
export HISTSIZE=20000
shopt -s histappend


# export PATH=/usr/local/apache-maven-3.2.5/bin:$PATH
# export JAVA_HOME=$(/usr/libexec/java_home -v 1.7)


alias nose='nosetests -sv'
alias nosem='nostests -sv --processes=6'

# rbenv
# ====================
#
export PATH="$HOME/.rbenv/bin:$HOME/.rbenv/shims:$PATH"



# NPM Completion
# ==============
###-begin-npm-completion-###
#
# npm command completion script
#
# Installation: npm completion >> ~/.bashrc  (or ~/.zshrc)
# Or, maybe: npm completion > /usr/local/etc/bash_completion.d/npm
#

COMP_WORDBREAKS=${COMP_WORDBREAKS/=/}
COMP_WORDBREAKS=${COMP_WORDBREAKS/@/}
export COMP_WORDBREAKS

if type complete &>/dev/null; then
  _npm_completion () {
    local si="$IFS"
    IFS=$'\n' COMPREPLY=($(COMP_CWORD="$COMP_CWORD" \
                           COMP_LINE="$COMP_LINE" \
                           COMP_POINT="$COMP_POINT" \
                           npm completion -- "${COMP_WORDS[@]}" \
                           2>/dev/null)) || return $?
    IFS="$si"
  }
  complete -F _npm_completion npm
elif type compdef &>/dev/null; then
  _npm_completion() {
    si=$IFS
    compadd -- $(COMP_CWORD=$((CURRENT-1)) \
                 COMP_LINE=$BUFFER \
                 COMP_POINT=0 \
                 npm completion -- "${words[@]}" \
                 2>/dev/null)
    IFS=$si
  }
  compdef _npm_completion npm
elif type compctl &>/dev/null; then
  _npm_completion () {
    local cword line point words si
    read -Ac words
    read -cn cword
    let cword-=1
    read -l line
    read -ln point
    si="$IFS"
    IFS=$'\n' reply=($(COMP_CWORD="$cword" \
                       COMP_LINE="$line" \
                       COMP_POINT="$point" \
                       npm completion -- "${words[@]}" \
                       2>/dev/null)) || return $?
    IFS="$si"
  }
  compctl -K _npm_completion npm
fi
###-end-npm-completion-###

export PROMPT_COMMAND='echo -ne "\033]0;$(basename "$PWD")\007"'

## apex completion

_apex()  {
  COMPREPLY=()
  local cur="${COMP_WORDS[COMP_CWORD]}"
  local opts="$(apex autocomplete -- ${COMP_WORDS[@]:1})"
  COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
  return 0
}

complete -F _apex apex


## remote_length
function remote_length() {
    curl -sI $1 | grep Content-Length
}

alias clc='echo -n `history -p !!` | pbcopy'

## Terraform
PATH=/usr/local/terraform/bin:$HOME/terraform:$PATH

alias scratch='export CLAY_ACCESS_KEY=MadeUpAccessKey; node /Users/greglavallee/dev/redux/scratch-cli/bin/cli.js bootstrap --amphora http://local.dev.slate.com:3001/ $@'
alias scratch-dev='export CLAY_ACCESS_KEY=MadeUpAccessKey; git checkout develop; node /Users/greglavallee/dev/redux/scratch-cli/bin/cli.js bootstrap --amphora https://dev.slate.com/ $@'

alias clayimport='clay export --page $1 | clay import -k MadeUpAccessKey slate-redux'

## Export your aws config
export AWS_ACCESS_KEY_ID=`aws configure get aws_access_key_id --profile=default`
export AWS_SECRET_ACCESS_KEY=`aws configure get aws_secret_access_key --profile=default`


# The next line updates PATH for the Google Cloud SDK.
if [ -f '/Users/greglavallee/Dev/google-cloud-sdk/path.bash.inc' ]; then source '/Users/greglavallee/Dev/google-cloud-sdk/path.bash.inc'; fi

# The next line enables shell command completion for gcloud.
if [ -f '/Users/greglavallee/Dev/google-cloud-sdk/completion.bash.inc' ]; then source '/Users/greglavallee/Dev/google-cloud-sdk/completion.bash.inc'; fi
